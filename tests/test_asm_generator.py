# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import asm_generator as module_0
import ir_ast as module_1
import assembly_ast as module_2
import dataclasses as module_3


def test_case_0():
    none_type_0 = None
    var_0 = module_0.lower_to_asm(none_type_0)


def test_case_1():
    none_type_0 = None
    with pytest.raises(NotImplementedError):
        module_0.lower_instr(none_type_0)


def test_case_2():
    none_type_0 = None
    with pytest.raises(NotImplementedError):
        module_0.lower_relational(none_type_0)


def test_case_3():
    none_type_0 = None
    with pytest.raises(NotImplementedError):
        module_0.lower_operator(none_type_0)


def test_case_4():
    bool_0 = True
    with pytest.raises(NotImplementedError):
        module_0.lower_operand(bool_0)


def test_case_5():
    str_0 = ""
    i_r_jump_0 = module_1.IRJump(str_0)
    var_0 = module_0.lower_instr(i_r_jump_0)


def test_case_6():
    str_0 = "B"
    var_0 = module_2.AsmCondCode.E
    var_1 = module_1.IRUnary(var_0, var_0, var_0)
    var_2 = module_3.dataclass(unsafe_hash=str_0, frozen=var_0, match_args=var_0)
    var_3 = var_0.__repr__()
    with pytest.raises(NotImplementedError):
        module_0.lower_instr(var_1)


def test_case_7():
    str_0 = ""
    i_r_var_0 = module_1.IRVar(str_0)
    i_r_copy_0 = module_1.IRCopy(i_r_var_0, i_r_var_0)
    var_0 = i_r_copy_0.__repr__()
    var_1 = module_0.lower_instr(i_r_copy_0)
    with pytest.raises(NotImplementedError):
        module_0.lower_operator(i_r_var_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = ""
    i_r_var_0 = module_1.IRVar(str_0)
    module_0.lower_unary(i_r_var_0, i_r_var_0, i_r_var_0)


def test_case_9():
    str_0 = ""
    i_r_jump_0 = module_1.IRJump(str_0)
    var_0 = i_r_jump_0.__repr__()
    var_1 = module_0.lower_to_asm(var_0)
    i_r_var_0 = module_1.IRVar(str_0)
    var_2 = var_0.__repr__()
    var_3 = var_2.__eq__(var_2)
    var_4 = var_0.__repr__()
    var_5 = i_r_var_0.__repr__()
    i_r_copy_0 = module_1.IRCopy(i_r_var_0, i_r_var_0)
    asm_cmp_0 = module_2.AsmCmp(i_r_copy_0, str_0)
    var_6 = module_0.lower_instr(i_r_copy_0)
    var_7 = var_3.__eq__(var_6)
    asm_cmp_1 = module_2.AsmCmp(i_r_copy_0, var_7)
    i_r_jump_if_not_zero_0 = module_1.IRJumpIfNotZero(var_0, var_6)
    with pytest.raises(NotImplementedError):
        module_0.lower_instr(i_r_jump_if_not_zero_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "6a6?W"
    i_r_function_definition_0 = module_1.IRFunctionDefinition(str_0, str_0)
    module_0.lower_to_asm(i_r_function_definition_0)


def test_case_11():
    str_0 = ""
    i_r_jump_0 = module_1.IRJump(str_0)
    var_0 = i_r_jump_0.__repr__()
    i_r_var_0 = module_1.IRVar(str_0)
    var_1 = i_r_var_0.__repr__()
    i_r_copy_0 = module_1.IRCopy(i_r_var_0, i_r_var_0)
    asm_cmp_0 = module_2.AsmCmp(i_r_copy_0, str_0)
    i_r_program_0 = module_1.IRProgram(var_1)
    var_2 = str_0.__eq__(i_r_var_0)
    var_3 = asm_cmp_0.__repr__()
    var_4 = module_0.lower_to_asm(i_r_program_0)
    var_5 = var_2.__eq__(var_3)
    var_6 = i_r_copy_0.__eq__(i_r_jump_0)
    var_7 = var_1.__eq__(var_5)
    with pytest.raises(NotImplementedError):
        module_0.lower_relational(var_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    i_r_constant_0 = module_1.IRConstant(bool_0)
    module_0.lower_unary(i_r_constant_0, i_r_constant_0, i_r_constant_0)


def test_case_13():
    str_0 = ""
    i_r_jump_0 = module_1.IRJump(str_0)
    var_0 = module_0.lower_to_asm(i_r_jump_0)
    var_1 = i_r_jump_0.__eq__(var_0)
    i_r_var_0 = module_1.IRVar(str_0)
    i_r_var_1 = module_1.IRVar(var_1)
    var_2 = var_1.__repr__()
    var_3 = var_0.__repr__()
    i_r_copy_0 = module_1.IRCopy(var_2, var_3)
    i_r_binary_0 = module_1.IRBinary(i_r_var_0, var_3, var_0, var_1)
    asm_cmp_0 = module_2.AsmCmp(var_2, i_r_binary_0)
    with pytest.raises(NotImplementedError):
        module_0.lower_instr(i_r_binary_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = ""
    i_r_function_definition_0 = module_1.IRFunctionDefinition(str_0, str_0)
    var_0 = module_0.lower_to_asm(i_r_function_definition_0)
    i_r_label_0 = module_1.IRLabel(str_0)
    i_r_var_0 = module_1.IRVar(str_0)
    var_1 = var_0.__repr__()
    i_r_copy_0 = module_1.IRCopy(i_r_var_0, i_r_var_0)
    var_2 = module_0.lower_instr(i_r_copy_0)
    module_0.lower_unary(i_r_var_0, i_r_var_0, i_r_var_0)


def test_case_15():
    i_r_binary_operator_0 = module_1.IRBinaryOperator.LessOrEqual
    none_type_0 = None
    i_r_unary_operator_0 = module_1.IRUnaryOperator.Negate
    int_0 = -3042
    var_0 = module_0.lower_operator(i_r_unary_operator_0)
    var_1 = var_0.__repr__()
    var_2 = module_0.lower_relational(i_r_binary_operator_0)
    var_3 = var_2.__eq__(int_0)
    with pytest.raises(NotImplementedError):
        module_0.lower_relational(none_type_0)


def test_case_16():
    str_0 = ""
    i_r_label_0 = module_1.IRLabel(str_0)
    i_r_var_0 = module_1.IRVar(str_0)
    i_r_copy_0 = module_1.IRCopy(i_r_var_0, i_r_var_0)
    var_0 = module_0.lower_instr(i_r_copy_0)
    i_r_binary_operator_0 = module_1.IRBinaryOperator.LessOrEqual
    i_r_unary_operator_0 = module_1.IRUnaryOperator.Complement
    int_0 = -3042
    var_1 = module_0.lower_operator(i_r_unary_operator_0)
    var_2 = var_1.__repr__()
    var_3 = module_0.lower_relational(i_r_binary_operator_0)
    var_4 = var_3.__eq__(int_0)
    with pytest.raises(NotImplementedError):
        module_0.lower_relational(i_r_copy_0)


def test_case_17():
    none_type_0 = None
    i_r_return_0 = module_1.IRReturn(none_type_0)
    with pytest.raises(NotImplementedError):
        module_0.lower_instr(i_r_return_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = ""
    i_r_label_0 = module_1.IRLabel(str_0)
    i_r_var_0 = module_1.IRVar(str_0)
    var_0 = module_0.lower_instr(i_r_label_0)
    i_r_copy_0 = module_1.IRCopy(i_r_var_0, i_r_var_0)
    var_1 = module_0.lower_instr(i_r_copy_0)
    module_0.lower_unary(i_r_var_0, i_r_var_0, i_r_var_0)


def test_case_19():
    i_r_binary_operator_0 = module_1.IRBinaryOperator.LessThan
    i_r_unary_operator_0 = module_1.IRUnaryOperator.Negate
    var_0 = module_0.lower_operator(i_r_unary_operator_0)
    bool_0 = False
    var_1 = module_0.lower_relational(i_r_binary_operator_0)
    with pytest.raises(NotImplementedError):
        module_0.lower_relational(bool_0)


def test_case_20():
    str_0 = ""
    i_r_label_0 = module_1.IRLabel(str_0)
    i_r_var_0 = module_1.IRVar(str_0)
    i_r_copy_0 = module_1.IRCopy(i_r_var_0, i_r_var_0)
    var_0 = module_0.lower_instr(i_r_copy_0)
    i_r_binary_operator_0 = module_1.IRBinaryOperator.NotEqual
    none_type_0 = None
    i_r_unary_operator_0 = module_1.IRUnaryOperator.Negate
    var_1 = module_0.lower_operator(i_r_unary_operator_0)
    var_2 = var_1.__repr__()
    var_3 = module_0.lower_relational(i_r_binary_operator_0)
    with pytest.raises(NotImplementedError):
        module_0.lower_relational(none_type_0)


def test_case_21():
    str_0 = ""
    i_r_function_definition_0 = module_1.IRFunctionDefinition(str_0, str_0)
    var_0 = module_0.lower_to_asm(i_r_function_definition_0)
    i_r_var_0 = module_1.IRVar(str_0)
    var_1 = var_0.__repr__()
    i_r_copy_0 = module_1.IRCopy(i_r_var_0, i_r_var_0)
    var_2 = module_0.lower_instr(i_r_copy_0)
    var_3 = var_0.__eq__(i_r_function_definition_0)
    var_4 = i_r_function_definition_0.__repr__()
    i_r_binary_operator_0 = module_1.IRBinaryOperator.Equal
    none_type_0 = None
    i_r_unary_operator_0 = module_1.IRUnaryOperator.Negate
    var_5 = var_1.__repr__()
    var_6 = var_4.__repr__()
    var_7 = var_1.__eq__(var_5)
    var_8 = var_1.__repr__()
    var_9 = var_5.__repr__()
    var_10 = var_1.__eq__(none_type_0)
    i_r_function_definition_1 = module_1.IRFunctionDefinition(str_0, var_10)
    bool_0 = False
    var_11 = var_7.__repr__()
    var_12 = var_8.__eq__(bool_0)
    int_0 = -3042
    var_13 = module_0.lower_operator(i_r_unary_operator_0)
    var_14 = var_13.__repr__()
    var_15 = module_0.lower_relational(i_r_binary_operator_0)
    var_16 = var_8.__eq__(var_10)
    var_17 = var_8.__repr__()
    var_18 = i_r_function_definition_1.__eq__(var_14)
    var_19 = var_18.__eq__(int_0)
    with pytest.raises(NotImplementedError):
        module_0.lower_relational(none_type_0)


def test_case_22():
    str_0 = ""
    i_r_label_0 = module_1.IRLabel(str_0)
    i_r_var_0 = module_1.IRVar(str_0)
    i_r_copy_0 = module_1.IRCopy(i_r_var_0, i_r_var_0)
    var_0 = module_0.lower_instr(i_r_copy_0)
    i_r_binary_operator_0 = module_1.IRBinaryOperator.GreaterThan
    none_type_0 = None
    i_r_unary_operator_0 = module_1.IRUnaryOperator.Negate
    int_0 = -3042
    var_1 = module_0.lower_operator(i_r_unary_operator_0)
    var_2 = var_1.__repr__()
    var_3 = module_0.lower_relational(i_r_binary_operator_0)
    var_4 = var_3.__eq__(int_0)
    with pytest.raises(NotImplementedError):
        module_0.lower_relational(none_type_0)


def test_case_23():
    i_r_binary_operator_0 = module_1.IRBinaryOperator.GreaterOrEqual
    i_r_unary_operator_0 = module_1.IRUnaryOperator.Negate
    var_0 = module_0.lower_operator(i_r_unary_operator_0)
    bool_0 = True
    var_1 = module_0.lower_relational(i_r_binary_operator_0)
    with pytest.raises(NotImplementedError):
        module_0.lower_relational(bool_0)


def test_case_24():
    str_0 = "ofW%G"
    i_r_function_definition_0 = module_1.IRFunctionDefinition(str_0, str_0)
    var_0 = module_1.IRJumpIfZero(str_0, str_0)
    i_r_label_0 = module_1.IRLabel(str_0)
    var_1 = var_0.__repr__()
    var_2 = var_0.__eq__(var_1)
    with pytest.raises(NotImplementedError):
        module_0.lower_instr(var_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    str_0 = ""
    i_r_var_0 = module_1.IRVar(str_0)
    module_0.lower_binary(str_0, i_r_var_0, i_r_var_0, i_r_var_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    i_r_binary_operator_0 = module_1.IRBinaryOperator.Multiply
    var_0 = module_0.lower_operator(i_r_binary_operator_0)
    module_0.lower_binary(i_r_binary_operator_0, var_0, var_0, i_r_binary_operator_0)


def test_case_27():
    none_type_0 = None
    i_r_unary_operator_0 = module_1.IRUnaryOperator.Not
    i_r_var_0 = module_1.IRVar(none_type_0)
    var_0 = module_0.lower_unary(i_r_unary_operator_0, i_r_var_0, i_r_var_0)
    with pytest.raises(NotImplementedError):
        module_0.lower_operator(var_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    none_type_0 = None
    i_r_unary_operator_0 = module_1.IRUnaryOperator.Not
    i_r_var_0 = module_1.IRVar(none_type_0)
    var_0 = module_0.lower_unary(i_r_unary_operator_0, i_r_var_0, i_r_var_0)
    i_r_binary_operator_0 = module_1.IRBinaryOperator.Subtract
    var_1 = module_0.lower_operator(i_r_binary_operator_0)
    var_2 = module_0.lower_to_asm(var_0)
    var_3 = var_0.__eq__(none_type_0)
    var_4 = var_0.__eq__(var_3)
    module_0.lower_unary(var_0, var_4, var_3)


@pytest.mark.xfail(strict=True)
def test_case_29():
    str_0 = "8"
    i_r_binary_operator_0 = module_1.IRBinaryOperator.Add
    var_0 = module_0.lower_operator(i_r_binary_operator_0)
    bool_0 = False
    var_1 = module_0.lower_to_asm(bool_0)
    var_2 = var_0.__eq__(var_1)
    var_3 = var_0.__eq__(str_0)
    module_0.lower_unary(var_1, i_r_binary_operator_0, str_0)
