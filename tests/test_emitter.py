# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import emitter as module_0
import c_ast as module_1
import ir_ast as module_2


def test_case_0():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    var_0 = i_r_emitter_0.make_label(i_r_emitter_0)
    assert var_0 == "end0"
    assert i_r_emitter_0.label_counter == 1


def test_case_1():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    with pytest.raises(RuntimeError):
        i_r_emitter_0.emit_binary_operator(i_r_emitter_0)


def test_case_2():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    with pytest.raises(RuntimeError):
        i_r_emitter_0.emit_unary_operator(i_r_emitter_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    i_r_emitter_0.emit_short_circuit_instructions(
        i_r_emitter_0, i_r_emitter_0, i_r_emitter_0, i_r_emitter_0
    )


def test_case_4():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    with pytest.raises(AssertionError):
        i_r_emitter_0.emit_statement(i_r_emitter_0)


def test_case_5():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0


@pytest.mark.xfail(strict=True)
def test_case_6():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    var_0 = i_r_emitter_0.make_temporary()
    assert var_0 == "tmp.0"
    assert i_r_emitter_0.register_counter == 1
    i_r_emitter_0.emit_short_circuit_instructions(i_r_emitter_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    i_r_emitter_0.emit_unary_instructions(i_r_emitter_0, i_r_emitter_0, i_r_emitter_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    none_type_0 = None
    i_r_emitter_0.emit_function(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    none_type_0 = None
    i_r_emitter_0.emit_program(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    none_type_0 = None
    var_0 = i_r_emitter_0.make_label()
    assert var_0 == "end0"
    assert i_r_emitter_0.label_counter == 1
    constant_0 = module_1.Constant(var_0)
    assert constant_0.constant == "end0"
    i_r_emitter_0.emit_unary_instructions(none_type_0, constant_0, constant_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    i_r_emitter_0.emit_binary_instructions(
        i_r_emitter_0, i_r_emitter_0, i_r_emitter_0, i_r_emitter_0
    )


def test_case_12():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    binary_operator_0 = module_1.BinaryOperator.Equal
    var_0 = i_r_emitter_0.make_label(i_r_emitter_0)
    assert var_0 == "end0"
    assert i_r_emitter_0.label_counter == 1
    var_1 = i_r_emitter_0.emit_binary_operator(binary_operator_0)
    with pytest.raises(RuntimeError):
        i_r_emitter_0.emit_unary_operator(binary_operator_0)


def test_case_13():
    int_0 = 2628
    binary_0 = module_1.Binary(int_0, int_0, int_0)
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    bool_0 = False
    with pytest.raises(RuntimeError):
        i_r_emitter_0.emit_instructions(binary_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    int_0 = 973
    constant_0 = module_1.Constant(int_0)
    unary_0 = module_1.Unary(int_0, constant_0)
    i_r_emitter_0.emit_short_circuit_instructions(int_0, unary_0, int_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    int_0 = 2628
    constant_0 = module_1.Constant(int_0)
    var_0 = module_1.BinaryOperator.And
    binary_0 = module_1.Binary(var_0, constant_0, constant_0)
    i_r_emitter_0.emit_short_circuit_instructions(var_0, binary_0, var_0, i_r_emitter_0)


def test_case_16():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    binary_operator_0 = module_1.BinaryOperator.NotEqual
    var_0 = i_r_emitter_0.make_label(i_r_emitter_0)
    assert var_0 == "end0"
    assert i_r_emitter_0.label_counter == 1
    var_1 = i_r_emitter_0.emit_binary_operator(binary_operator_0)
    var_2 = module_2.IRProgram(binary_operator_0)
    with pytest.raises(RuntimeError):
        i_r_emitter_0.emit_unary_operator(binary_operator_0)


def test_case_17():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    var_0 = module_1.BinaryOperator.Multiply
    var_1 = i_r_emitter_0.make_label()
    assert var_1 == "end0"
    assert i_r_emitter_0.label_counter == 1
    var_2 = i_r_emitter_0.emit_binary_operator(var_0)


def test_case_18():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    binary_operator_0 = module_1.BinaryOperator.LessThan
    var_0 = i_r_emitter_0.make_label(i_r_emitter_0)
    assert var_0 == "end0"
    assert i_r_emitter_0.label_counter == 1
    var_1 = i_r_emitter_0.emit_binary_operator(binary_operator_0)
    with pytest.raises(RuntimeError):
        i_r_emitter_0.emit_unary_operator(binary_operator_0)


def test_case_19():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    binary_operator_0 = module_1.BinaryOperator.LessOrEqual
    var_0 = i_r_emitter_0.make_label(i_r_emitter_0)
    assert var_0 == "end0"
    assert i_r_emitter_0.label_counter == 1
    var_1 = i_r_emitter_0.emit_binary_operator(binary_operator_0)
    var_2 = var_1.__repr__()
    with pytest.raises(RuntimeError):
        i_r_emitter_0.emit_unary_operator(binary_operator_0)


def test_case_20():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    binary_operator_0 = module_1.BinaryOperator.GreaterThan
    var_0 = i_r_emitter_0.make_label(i_r_emitter_0)
    assert var_0 == "end0"
    assert i_r_emitter_0.label_counter == 1
    var_1 = i_r_emitter_0.emit_binary_operator(binary_operator_0)
    with pytest.raises(RuntimeError):
        i_r_emitter_0.emit_unary_operator(binary_operator_0)


def test_case_21():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    binary_operator_0 = module_1.BinaryOperator.Remainder
    var_0 = i_r_emitter_0.emit_binary_operator(binary_operator_0)
    with pytest.raises(RuntimeError):
        i_r_emitter_0.emit_unary_operator(binary_operator_0)


def test_case_22():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    binary_operator_0 = module_1.BinaryOperator.Divide
    var_0 = i_r_emitter_0.make_label()
    assert var_0 == "end0"
    assert i_r_emitter_0.label_counter == 1
    var_1 = i_r_emitter_0.emit_binary_operator(binary_operator_0)


def test_case_23():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    binary_operator_0 = module_1.BinaryOperator.GreaterOrEqual
    var_0 = i_r_emitter_0.make_label(i_r_emitter_0)
    assert var_0 == "end0"
    assert i_r_emitter_0.label_counter == 1
    var_1 = i_r_emitter_0.emit_binary_operator(binary_operator_0)
    exp_0 = module_1.Exp()
    with pytest.raises(RuntimeError):
        i_r_emitter_0.emit_unary_operator(binary_operator_0)


def test_case_24():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    binary_operator_0 = module_1.BinaryOperator.Add
    var_0 = i_r_emitter_0.emit_binary_operator(binary_operator_0)
    var_1 = i_r_emitter_0.make_label()
    assert var_1 == "end0"
    assert i_r_emitter_0.label_counter == 1
    with pytest.raises(RuntimeError):
        i_r_emitter_0.emit_unary_operator(var_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    binary_operator_0 = module_1.BinaryOperator.GreaterThan
    var_0 = module_1.UnaryOperator.Complement
    var_1 = i_r_emitter_0.emit_binary_operator(binary_operator_0)
    var_2 = i_r_emitter_0.make_label()
    assert var_2 == "end0"
    assert i_r_emitter_0.label_counter == 1
    var_3 = i_r_emitter_0.emit_unary_operator(var_0)
    var_0.emit_instructions(var_3, var_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    int_0 = 2628
    constant_0 = module_1.Constant(int_0)
    var_0 = module_1.BinaryOperator.Subtract
    binary_0 = module_1.Binary(var_0, constant_0, constant_0)
    i_r_emitter_0.emit_short_circuit_instructions(var_0, binary_0, var_0, i_r_emitter_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    unary_operator_0 = module_1.UnaryOperator.Negate
    var_0 = i_r_emitter_0.emit_unary_operator(unary_operator_0)
    unary_operator_0.emit_instructions(var_0, unary_operator_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    binary_operator_0 = module_1.BinaryOperator.GreaterThan
    unary_operator_0 = module_1.UnaryOperator.Not
    var_0 = i_r_emitter_0.emit_binary_operator(binary_operator_0)
    var_1 = i_r_emitter_0.make_label()
    assert var_1 == "end0"
    assert i_r_emitter_0.label_counter == 1
    var_2 = i_r_emitter_0.emit_unary_operator(unary_operator_0)
    unary_operator_0.emit_instructions(var_2, unary_operator_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    int_0 = 2628
    constant_0 = module_1.Constant(int_0)
    var_0 = module_1.BinaryOperator.Or
    binary_0 = module_1.Binary(var_0, constant_0, constant_0)
    i_r_emitter_0.emit_short_circuit_instructions(var_0, binary_0, var_0, int_0)


def test_case_30():
    i_r_emitter_0 = module_0.IREmitter()
    assert module_0.IREmitter.register_counter == 0
    assert module_0.IREmitter.label_counter == 0
    constant_0 = module_1.Constant(i_r_emitter_0)
    var_0 = constant_0.__repr__()
    var_1 = module_1.Return(constant_0)
    var_2 = i_r_emitter_0.emit_statement(var_1)
    with pytest.raises(RuntimeError):
        i_r_emitter_0.emit_binary_operator(var_0)
